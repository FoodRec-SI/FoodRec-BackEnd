-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.meal_post
(
    postid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    mealid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT meal_post_pkey PRIMARY KEY (mealid, postid)
);

CREATE TABLE IF NOT EXISTS public.meal
(
    mealid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    mealname character varying(255) COLLATE pg_catalog."default" NOT NULL,
    userid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    calories integer NOT NULL,
    planid character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT meal_pkey PRIMARY KEY (mealid)
);

CREATE TABLE IF NOT EXISTS public.plan
(
    planid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    planname character varying(255) COLLATE pg_catalog."default",
    userid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    "ingredient-list" character varying(255) COLLATE pg_catalog."default",
    "meal-quantity" integer NOT NULL,
    date timestamp(6) without time zone NOT NULL,
    calories integer NOT NULL,
    CONSTRAINT plan_pkey PRIMARY KEY (planid)
);

CREATE TABLE IF NOT EXISTS public.account
(
    userid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    name character varying(255) COLLATE pg_catalog."default",
    description character varying(255) COLLATE pg_catalog."default",
    "profile-image" character varying(255) COLLATE pg_catalog."default",
    "background-image" character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT account_pkey PRIMARY KEY (userid)
);

CREATE TABLE IF NOT EXISTS public.notification
(
    postid character varying(30) COLLATE pg_catalog."default" NOT NULL,
    userid character varying(30) COLLATE pg_catalog."default" NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT notification_pkey PRIMARY KEY (postid, userid)
);

CREATE TABLE IF NOT EXISTS public.post
(
    postid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    status integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    userid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    moderatorid character varying(255) COLLATE pg_catalog."default",
    recipename character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    calories integer NOT NULL,
    duration integer NOT NULL,
    recipeid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "created-time" timestamp(6) without time zone NOT NULL,
    image character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "verified-time" timestamp(6) without time zone,
    "average-score" double precision DEFAULT 0,
    "ingredient-list" character varying(255) COLLATE pg_catalog."default",
    instruction character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT post_pkey PRIMARY KEY (postid)
);

CREATE TABLE IF NOT EXISTS public.recipe
(
    recipeid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    recipename character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    calories integer NOT NULL,
    userid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    duration integer NOT NULL,
    status boolean NOT NULL DEFAULT true,
    image character varying(255) COLLATE pg_catalog."default",
    instructions character varying(255) COLLATE pg_catalog."default",
    "ingredient-list" character varying(255) COLLATE pg_catalog."default",
    CONSTRAINT recipe_pkey PRIMARY KEY (recipeid)
);

CREATE TABLE IF NOT EXISTS public.recipe_tag
(
    tagid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    recipeid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT recipe_tag_pkey PRIMARY KEY (tagid, recipeid)
);

CREATE TABLE IF NOT EXISTS public.tag
(
    tagid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    tagname character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT tag_pkey PRIMARY KEY (tagid)
);

CREATE TABLE IF NOT EXISTS public.account_tag
(
    userid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    tagid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT account_tag_pkey PRIMARY KEY (userid, tagid)
);

CREATE TABLE IF NOT EXISTS public.rating
(
    userid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    postid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    score integer NOT NULL,
    CONSTRAINT rating_pkey PRIMARY KEY (userid, postid)
);

CREATE TABLE IF NOT EXISTS public.post_collection
(
    postid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    collectionid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT post_collection_pkey PRIMARY KEY (postid, collectionid)
);

CREATE TABLE IF NOT EXISTS public.collection
(
    collectionid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    collectionname character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default",
    userid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT collection_pkey PRIMARY KEY (collectionid)
);

CREATE TABLE IF NOT EXISTS public.likes
(
    postid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    userid character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT likes_pkey PRIMARY KEY (postid, userid)
);

ALTER TABLE IF EXISTS public.meal_post
    ADD CONSTRAINT meal_post_mealid_fkey FOREIGN KEY (mealid)
        REFERENCES public.meal (mealid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS meal_post_mealid_fkey
    ON public.meal_post(mealid);


ALTER TABLE IF EXISTS public.meal_post
    ADD CONSTRAINT meal_post_postid_fkey FOREIGN KEY (postid)
        REFERENCES public.post (postid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS meal_post_postid_fkey
    ON public.meal_post(postid);


ALTER TABLE IF EXISTS public.meal
    ADD CONSTRAINT meal_planid_fkey FOREIGN KEY (planid)
        REFERENCES public.plan (planid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS meal_planid_fkey
    ON public.meal(planid);


ALTER TABLE IF EXISTS public.meal
    ADD CONSTRAINT meal_userid_fkey FOREIGN KEY (userid)
        REFERENCES public.account (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS meal_userid_fkey
    ON public.meal(userid);


ALTER TABLE IF EXISTS public.plan
    ADD CONSTRAINT plan_userid_fkey FOREIGN KEY (userid)
        REFERENCES public.account (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notification
    ADD CONSTRAINT notification_postid_fkey FOREIGN KEY (postid)
        REFERENCES public.post (postid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.notification
    ADD CONSTRAINT notification_userid_fkey FOREIGN KEY (userid)
        REFERENCES public.account (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID;


ALTER TABLE IF EXISTS public.post
    ADD CONSTRAINT post_moderatorid_fkey FOREIGN KEY (moderatorid)
        REFERENCES public.account (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.post
    ADD CONSTRAINT post_recipeid_fkey FOREIGN KEY (recipeid)
        REFERENCES public.recipe (recipeid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;
CREATE INDEX IF NOT EXISTS post_recipeid_fkey
    ON public.post(recipeid);


ALTER TABLE IF EXISTS public.post
    ADD CONSTRAINT post_userid_fkey FOREIGN KEY (userid)
        REFERENCES public.account (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.recipe
    ADD CONSTRAINT recipe_userid_fkey FOREIGN KEY (userid)
        REFERENCES public.account (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.recipe_tag
    ADD CONSTRAINT recipe_tag_recipeid_fkey FOREIGN KEY (recipeid)
        REFERENCES public.recipe (recipeid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.recipe_tag
    ADD CONSTRAINT recipe_tag_tagid_fkey FOREIGN KEY (tagid)
        REFERENCES public.tag (tagid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID;


ALTER TABLE IF EXISTS public.account_tag
    ADD CONSTRAINT account_tag_tagid_fkey FOREIGN KEY (tagid)
        REFERENCES public.tag (tagid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID;


ALTER TABLE IF EXISTS public.account_tag
    ADD CONSTRAINT fkb0g7r9msi8xjk6mhpixk6qyf0 FOREIGN KEY (userid)
        REFERENCES public.account (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.rating
    ADD CONSTRAINT rating_postid_fkey FOREIGN KEY (postid)
        REFERENCES public.post (postid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.rating
    ADD CONSTRAINT rating_userid_fkey FOREIGN KEY (userid)
        REFERENCES public.account (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID;


ALTER TABLE IF EXISTS public.post_collection
    ADD CONSTRAINT post_collection_collectionid_fkey FOREIGN KEY (collectionid)
        REFERENCES public.collection (collectionid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID;


ALTER TABLE IF EXISTS public.post_collection
    ADD CONSTRAINT post_collection_postid_fkey FOREIGN KEY (postid)
        REFERENCES public.post (postid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID;


ALTER TABLE IF EXISTS public.likes
    ADD CONSTRAINT likes_postid_fkey FOREIGN KEY (postid)
        REFERENCES public.post (postid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.likes
    ADD CONSTRAINT likes_userid_fkey FOREIGN KEY (userid)
        REFERENCES public.account (userid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION;

END;